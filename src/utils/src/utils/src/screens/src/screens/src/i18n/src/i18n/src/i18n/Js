import React, { useState } from 'react';
import { View, Text, Button, StyleSheet, TextInput, Alert } from 'react-native';
import * as Speech from 'expo-speech';
import { Audio } from 'expo-av';

export default function VoiceJournalScreen() {
  const [recording, setRecording] = useState(null);
  const [transcript, setTranscript] = useState('');
  const [recordedUri, setRecordedUri] = useState(null);

  const startRecording = async () => {
    try {
      console.log('Requesting permissions..');
      await Audio.requestPermissionsAsync();
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true
      });

      const { recording } = await Audio.Recording.createAsync(
        Audio.RecordingOptionsPresets.HIGH_QUALITY
      );

      setRecording(recording);
      console.log('Recording started');
    } catch (err) {
      console.error('Failed to start recording', err);
    }
  };

  const stopRecording = async () => {
    console.log('Stopping recording..');
    setRecording(undefined);
    await recording.stopAndUnloadAsync();
    const uri = recording.getURI();
    console.log('Recording stopped and stored at', uri);
    setRecordedUri(uri);
    Alert.alert('Recording saved ✅', 'Now you can transcribe or play it');
  };

  const playRecording = async () => {
    if (!recordedUri) return;
    const soundObject = new Audio.Sound();
    try {
      await soundObject.loadAsync({ uri: recordedUri });
      await soundObject.playAsync();
    } catch (error) {
      console.log('Playback error:', error);
    }
  };

  const fakeTranscribe = () => {
    setTranscript('I am feeling a little anxious today but hopeful about the future.');
    Alert.alert('Transcribed (Demo)', 'This is a sample transcript. In production, connect to Whisper API or Google STT.');
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>🎙 Voice Journal</Text>

      <Button
        title={recording ? '⏹ Stop Recording' : '🎤 Start Recording'}
        onPress={recording ? stopRecording : startRecording}
      />

      <View style={styles.spacer} />

      {recordedUri && (
        <>
          <Button title="▶️ Play Recording" onPress={playRecording} />
          <View style={styles.spacer} />
          <Button title="📝 Transcribe (Mock)" onPress={fakeTranscribe} />
        </>
      )}

      <TextInput
        style={styles.textArea}
        multiline
        placeholder="Transcribed voice will appear here..."
        value={transcript}
        onChangeText={setTranscript}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  header: { fontSize: 22, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  spacer: { height: 20 },
  textArea: {
    height: 150,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 8,
    padding: 10,
    marginTop: 15,
    textAlignVertical: 'top'
  }
});
